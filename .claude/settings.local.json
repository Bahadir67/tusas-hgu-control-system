{
  "permissions": {
    "allow": [
      "Bash(powershell:*)",
      "Bash(cp:*)",
      "Bash(ls:*)",
      "Bash(pwsh:*)",
      "Bash(curl:*)",
      "Bash(ss:*)",
      "WebFetch(domain:grafana.com)",
      "Bash(python3:*)",
      "Bash(python test_connection.py:*)",
      "Bash(timeout:*)",
      "Bash(pgrep:*)",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(sudo kill:*)",
      "Bash(/var/lib/gitea/scripts/start-forgejo-simple.sh:*)",
      "Bash(cat:*)",
      "Bash(rm:*)",
      "Bash(pip install:*)",
      "Bash(cmake:*)",
      "mcp__fs-mcp__read_file",
      "Bash(mv:*)",
      "Bash(grep:*)",
      "Bash(dotnet build)",
      "Bash(find:*)",
      "Bash(explorer.exe:*)",
      "Bash(where msbuild)",
      "Bash(dotnet build:*)",
      "Bash(dotnet add package:*)",
      "Bash(python test-workstation-opcua.py:*)",
      "Bash(tasklist:*)",
      "Bash(wmic:*)",
      "Bash(python test_opcua_simple.py:*)",
      "WebFetch(domain:learn.microsoft.com)",
      "WebFetch(domain:www.unified-automation.com)",
      "WebFetch(domain:www.nuget.org)",
      "WebFetch(domain:github.com)",
      "Bash(/mnt/c/Program Files/dotnet/dotnet.exe build)",
      "Bash(sudo hdparm:*)",
      "Bash(cmd.exe /c \"wmic computersystem get manufacturer,model,serialnumber /format:table\")",
      "Bash(cmd.exe /c \"wmic bios get serialnumber /format:table\")",
      "Bash(cmd.exe:*)",
      "mcp__fs-mcp__directory_tree",
      "mcp__fs-mcp__list_directory",
      "mcp__fs-mcp__read_multiple_files",
      "Bash(/c/Program Files/dotnet/dotnet.exe build)",
      "Bash(touch:*)",
      "Bash(python:*)",
      "Bash(dotnet run)",
      "Bash(./bin/Debug/net6.0-windows/TUSAS.HGU.Control.exe)",
      "Bash(true)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(sed:*)",
      "mcp__filesystem__list_directory",
      "Bash(claude mcp add:*)",
      "Bash(claude mcp:*)",
      "Bash(claude config get mcpServers)",
      "Bash(serena:*)",
      "mcp__context7__resolve-library-id",
      "Bash(git config:*)",
      "mcp__serena__initial_instructions",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__activate_project",
      "mcp__serena__read_memory",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__read_file",
      "mcp__serena__list_dir",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__replace_regex",
      "mcp__serena__create_text_file",
      "mcp__serena__summarize_changes",
      "mcp__serena__execute_shell_command",
      "mcp__serena__onboarding",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__write_memory",
      "Bash(git commit:*)",
      "Bash(git add:*)",
      "mcp__serena__restart_language_server",
      "mcp__serena__list_memories",
      "Bash(cargo --version)",
      "Bash(./rustup-init.exe -y --default-toolchain stable)",
      "Bash(source:*)",
      "Bash(rustc --version)",
      "Bash(export PATH=\"$PATH:/c/Users/Bahadira-NB3/.cargo/bin\")",
      "Bash(cargo install:*)",
      "mcp__serena__get_current_config",
      "mcp__serena__delete_memory",
      "Bash(npm run build:*)",
      "Bash(move index.tsx index.tsx.broken)",
      "Bash(npm run dev:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(npx tsc:*)",
      "Bash(copy index.tsx.broken index.tsx)",
      "Bash(node:*)",
      "Bash(npx vite:*)",
      "mcp__serena__switch_modes",
      "Bash(for file in *.scl)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "mcp__serena__think_about_task_adherence",
      "Bash(tree:*)",
      "Bash(mkdir:*)",
      "Bash(copy:*)",
      "Bash(npx @byterover/cipher ask \"Bu projede 6x75kW Load Sensing hydraulic motorlu bir HGU control sistemi geliştiriyoruz. TIA Portal V17 SCL ile PLC programladık ve C# .NET 9 ile OPC UA + InfluxDB backend yaptık. Tauri frontend yapacağız. Bu bilgiyi hatırla.\")",
      "WebFetch(domain:docs.byterover.dev)",
      "Bash(where claude)",
      "Bash(dir:*)",
      "Bash(npx @byterover/cipher:*)",
      "Bash(claude:*)",
      "Bash(npx:*)",
      "Bash(git clone:*)",
      "Bash(npm install)",
      "Bash(PYTHONPATH=src python -m mcp_memory_service --help)",
      "Bash(PYTHONPATH=src MCP_STORAGE_BACKEND=sqlite_vec python src/mcp_memory_service/mcp_server.py)",
      "Bash(MCP_STORAGE_BACKEND=sqlite_vec MCP_DATA_DIR=\"C:\\Users\\Bahadira-NB3\\.claude\\mcp-memory-data\" python scripts/run_memory_server.py)",
      "Bash(PYTHONPATH=src MCP_STORAGE_BACKEND=sqlite_vec MCP_DATA_DIR=\"C:\\Users\\Bahadira-NB3\\.claude\\mcp-memory-data\" python scripts/run_memory_server.py)",
      "Bash(setx:*)",
      "Bash(pip uninstall:*)",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__memory__create_entities",
      "mcp__memory__add_observations"
    ],
    "deny": [],
    "defaultMode": "acceptEdits",
    "additionalDirectories": [
      "C:\\Users\\Bahadira-NB3\\.claude\\mcp-memory-service",
      "C:\\c\\Users\\Bahadira-NB3\\.claude",
      "C:\\c\\projects"
    ]
  }
}