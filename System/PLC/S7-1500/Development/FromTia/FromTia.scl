FUNCTION_BLOCK "FB_HGU_LED_Control"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
// =============================================================================
// TUSAÅž HGU Control System - LED Control Function Block
// TIA Portal S7-1500 Structured Control Language (SCL)
// Generated: 2025-01-14
// Description: LED control logic based on motor status and filter conditions
// =============================================================================
   VAR_INPUT 
      motor_status : USInt;   // Motor Status (0=Offline, 1=Ready, 2=Running, 3=Warning, 4=Error)
      line_filter_status : USInt;   // Line Filter Status (0=Error, 1=Warning, 2=OK)
      suction_filter_status : USInt;   // Suction Filter Status (0=Error, 1=OK)
      valve_status : Bool;   // Valve Status (FALSE=Closed, TRUE=Open)
      blink_clock : Bool;   // System blink clock (for running indication)
   END_VAR

   VAR_OUTPUT 
      ready_led : Bool;   // Ready LED (Green)
      warning_led : Bool;   // Warning LED (Yellow)
      error_led : Bool;   // Error LED (Red)
      running_blink : Bool;   // Running Blink LED (Green Blinking)
      line_filter_led_green : Bool;   // Line Filter OK LED (Green)
      line_filter_led_yellow : Bool;   // Line Filter Warning LED (Yellow)
      line_filter_led_red : Bool;   // Line Filter Error LED (Red)
      suction_filter_led_green : Bool;   // Suction Filter OK LED (Green)
      suction_filter_led_red : Bool;   // Suction Filter Error LED (Red)
      valve_led : Bool;   // Valve LED (Green when Open)
   END_VAR


BEGIN
	// =============================================================================
	// Motor Status LED Control Logic
	// Based on execution_variables.txt specifications:
	// 0=Offline(tÃ¼m ledler gri), 1=Ready(yeÅŸil led,diÄŸerleri gri), 
	// 2=Running(yeÅŸil blink,diÄŸerleri gri), 3=Warning(sarÄ±,diÄŸerleri gri), 
	// 4=Error(kÄ±rmÄ±zÄ±,diÄŸerleri gri)
	// =============================================================================
	
	// Initialize all motor status LEDs to OFF (Gray)
	#ready_led := FALSE;
	#warning_led := FALSE;
	#error_led := FALSE;
	#running_blink := FALSE;
	
	// Motor Status LED Logic
	CASE #motor_status OF
	    0: // Offline - All LEDs Gray (OFF)
	        #ready_led := FALSE;
	        #warning_led := FALSE;
	        #error_led := FALSE;
	        #running_blink := FALSE;
	        
	    1: // Ready - Green LED ON, others Gray
	        #ready_led := TRUE;
	        #warning_led := FALSE;
	        #error_led := FALSE;
	        #running_blink := FALSE;
	        
	    2: // Running - Green LED Blinking, others Gray
	        #ready_led := FALSE;
	        #warning_led := FALSE;
	        #error_led := FALSE;
	        #running_blink := #blink_clock;
	        
	    3: // Warning - Yellow LED ON, others Gray
	        #ready_led := FALSE;
	        #warning_led := TRUE;
	        #error_led := FALSE;
	        #running_blink := FALSE;
	        
	    4: // Error - Red LED ON, others Gray
	        #ready_led := FALSE;
	        #warning_led := FALSE;
	        #error_led := TRUE;
	        #running_blink := FALSE;
	        
	    ELSE: // Default case - All LEDs OFF
	        #ready_led := FALSE;
	        #warning_led := FALSE;
	        #error_led := FALSE;
	        #running_blink := FALSE;
	END_CASE;
	
	// =============================================================================
	// Line Filter LED Control Logic
	// 0=Error(led=kÄ±rmÄ±zÄ±), 1=Warning(led sarÄ±), 2=OK(led yeÅŸil)
	// =============================================================================
	
	// Initialize all line filter LEDs to OFF
	#line_filter_led_green := FALSE;
	#line_filter_led_yellow := FALSE;
	#line_filter_led_red := FALSE;
	
	CASE #line_filter_status OF
	    0: // Error - Red LED ON
	        #line_filter_led_red := TRUE;
	        
	    1: // Warning - Yellow LED ON
	        #line_filter_led_yellow := TRUE;
	        
	    2: // OK - Green LED ON
	        #line_filter_led_green := TRUE;
	        
	    ELSE:
	        ; // Default case - All LEDs OFF
	        // LEDs remain OFF (already initialized to FALSE)
	END_CASE;
	
	// =============================================================================
	// Suction Filter LED Control Logic
	// 0=Error(led kÄ±rmÄ±zÄ±), 1=OK(led yeÅŸil)
	// =============================================================================
	
	// Initialize all suction filter LEDs to OFF
	#suction_filter_led_green := FALSE;
	#suction_filter_led_red := FALSE;
	
	CASE #suction_filter_status OF
	    0: // Error - Red LED ON
	        #suction_filter_led_red := TRUE;
	        
	    1: // OK - Green LED ON
	        #suction_filter_led_green := TRUE;
	        
	    ELSE:
	        ; // Default case - All LEDs OFF
	        // LEDs remain OFF (already initialized to FALSE)
	END_CASE;
	
	// =============================================================================
	// Valve LED Control Logic
	// FALSE=Closed (LED OFF), TRUE=Open (LED Green)
	// =============================================================================
	
	#valve_led := #valve_status;
	
END_FUNCTION_BLOCK

DATA_BLOCK "DB_HGU_Execution"
TITLE = 'HGU Execution Variables Data Block'
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
// =============================================================================
// TUSAÅž HGU Control System - Execution Variables Data Block
// TIA Portal S7-1500 Structured Control Language (SCL)
// Generated: 2025-01-14
// Description: All execution variables for HGU system synchronized with UI
// =============================================================================
   VAR 
      MOTOR_1_RPM_EXECUTION : Real;   // Motor 1 RPM Execution Value
      MOTOR_1_CURRENT_EXECUTION : Real;   // Motor 1 Current (A) Execution Value
      MOTOR_1_TARGET_EXECUTION : Real;   // Motor 1 Target RPM Execution Value
      MOTOR_1_FLOW_EXECUTION : Real;   // Motor 1 Flow Rate (L/min) Execution Value
      MOTOR_1_PRESSURE_EXECUTION : Real;   // Motor 1 Pressure (bar) Execution Value
      MOTOR_1_LEAK_EXECUTION : Real;   // Motor 1 Leak Rate (L/min) Execution Value
      MOTOR_1_TEMPERATURE_EXECUTION : Real;   // Motor 1 Temperature (Â°C) Execution Value
      MOTOR_1_STATUS_EXECUTION : USInt;   // Motor 1 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_1_VALVE_EXECUTION : USInt;   // Motor 1 Valve Control (0=Closed, 1=Open)
      MOTOR_1_LINE_FILTER_EXECUTION : USInt;   // Motor 1 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_1_SUCTION_FILTER_EXECUTION : USInt;   // Motor 1 Suction Filter Status (0=Error, 1=OK)
      MOTOR_1_ENABLE_EXECUTION : Bool;   // Motor 1 Enable Control (FALSE=Disabled, TRUE=Enabled) Motor-Pump #2 Variables
      MOTOR_2_RPM_EXECUTION : Real;   // Motor 2 RPM Execution Value
      MOTOR_2_CURRENT_EXECUTION : Real;   // Motor 2 Current (A) Execution Value
      MOTOR_2_TARGET_EXECUTION : Real;   // Motor 2 Target RPM Execution Value
      MOTOR_2_FLOW_EXECUTION : Real;   // Motor 2 Flow Rate (L/min) Execution Value
      MOTOR_2_PRESSURE_EXECUTION : Real;   // Motor 2 Pressure (bar) Execution Value
      MOTOR_2_LEAK_EXECUTION : Real;   // Motor 2 Leak Rate (L/min) Execution Value
      MOTOR_2_TEMPERATURE_EXECUTION : Real;   // Motor 2 Temperature (Â°C) Execution Value
      MOTOR_2_STATUS_EXECUTION : USInt;   // Motor 2 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_2_VALVE_EXECUTION : USInt;   // Motor 2 Valve Control (0=Closed, 1=Open)
      MOTOR_2_LINE_FILTER_EXECUTION : USInt;   // Motor 2 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_2_SUCTION_FILTER_EXECUTION : USInt;   // Motor 2 Suction Filter Status (0=Error, 1=OK)
      MOTOR_2_ENABLE_EXECUTION : Bool;   // Motor 2 Enable Control (FALSE=Disabled, TRUE=Enabled) Motor-Pump #3 Variables
      MOTOR_3_RPM_EXECUTION : Real;   // Motor 3 RPM Execution Value
      MOTOR_3_CURRENT_EXECUTION : Real;   // Motor 3 Current (A) Execution Value
      MOTOR_3_TARGET_EXECUTION : Real;   // Motor 3 Target RPM Execution Value
      MOTOR_3_FLOW_EXECUTION : Real;   // Motor 3 Flow Rate (L/min) Execution Value
      MOTOR_3_PRESSURE_EXECUTION : Real;   // Motor 3 Pressure (bar) Execution Value
      MOTOR_3_LEAK_EXECUTION : Real;   // Motor 3 Leak Rate (L/min) Execution Value
      MOTOR_3_TEMPERATURE_EXECUTION : Real;   // Motor 3 Temperature (Â°C) Execution Value
      MOTOR_3_STATUS_EXECUTION : USInt;   // Motor 3 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_3_VALVE_EXECUTION : USInt;   // Motor 3 Valve Control (0=Closed, 1=Open)
      MOTOR_3_LINE_FILTER_EXECUTION : USInt;   // Motor 3 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_3_SUCTION_FILTER_EXECUTION : USInt;   // Motor 3 Suction Filter Status (0=Error, 1=OK)
      MOTOR_3_ENABLE_EXECUTION : Bool;   // Motor 3 Enable Control (FALSE=Disabled, TRUE=Enabled) Motor-Pump #4 Variables
      MOTOR_4_RPM_EXECUTION : Real;   // Motor 4 RPM Execution Value
      MOTOR_4_CURRENT_EXECUTION : Real;   // Motor 4 Current (A) Execution Value
      MOTOR_4_TARGET_EXECUTION : Real;   // Motor 4 Target RPM Execution Value
      MOTOR_4_FLOW_EXECUTION : Real;   // Motor 4 Flow Rate (L/min) Execution Value
      MOTOR_4_PRESSURE_EXECUTION : Real;   // Motor 4 Pressure (bar) Execution Value
      MOTOR_4_LEAK_EXECUTION : Real;   // Motor 4 Leak Rate (L/min) Execution Value
      MOTOR_4_TEMPERATURE_EXECUTION : Real;   // Motor 4 Temperature (Â°C) Execution Value
      MOTOR_4_STATUS_EXECUTION : USInt;   // Motor 4 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_4_VALVE_EXECUTION : USInt;   // Motor 4 Valve Control (0=Closed, 1=Open)
      MOTOR_4_LINE_FILTER_EXECUTION : USInt;   // Motor 4 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_4_SUCTION_FILTER_EXECUTION : USInt;   // Motor 4 Suction Filter Status (0=Error, 1=OK)
      MOTOR_4_ENABLE_EXECUTION : Bool;   // Motor 4 Enable Control (FALSE=Disabled, TRUE=Enabled) Motor-Pump #5 Variables
      MOTOR_5_RPM_EXECUTION : Real;   // Motor 5 RPM Execution Value
      MOTOR_5_CURRENT_EXECUTION : Real;   // Motor 5 Current (A) Execution Value
      MOTOR_5_TARGET_EXECUTION : Real;   // Motor 5 Target RPM Execution Value
      MOTOR_5_FLOW_EXECUTION : Real;   // Motor 5 Flow Rate (L/min) Execution Value
      MOTOR_5_PRESSURE_EXECUTION : Real;   // Motor 5 Pressure (bar) Execution Value
      MOTOR_5_LEAK_EXECUTION : Real;   // Motor 5 Leak Rate (L/min) Execution Value
      MOTOR_5_TEMPERATURE_EXECUTION : Real;   // Motor 5 Temperature (Â°C) Execution Value
      MOTOR_5_STATUS_EXECUTION : USInt;   // Motor 5 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_5_VALVE_EXECUTION : USInt;   // Motor 5 Valve Control (0=Closed, 1=Open)
      MOTOR_5_LINE_FILTER_EXECUTION : USInt;   // Motor 5 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_5_SUCTION_FILTER_EXECUTION : USInt;   // Motor 5 Suction Filter Status (0=Error, 1=OK)
      MOTOR_5_ENABLE_EXECUTION : Bool;   // Motor 5 Enable Control (FALSE=Disabled, TRUE=Enabled) Motor-Pump #6 Variables
      MOTOR_6_RPM_EXECUTION : Real;   // Motor 6 RPM Execution Value
      MOTOR_6_CURRENT_EXECUTION : Real;   // Motor 6 Current (A) Execution Value
      MOTOR_6_TARGET_EXECUTION : Real;   // Motor 6 Target RPM Execution Value
      MOTOR_6_FLOW_EXECUTION : Real;   // Motor 6 Flow Rate (L/min) Execution Value
      MOTOR_6_PRESSURE_EXECUTION : Real;   // Motor 6 Pressure (bar) Execution Value
      MOTOR_6_LEAK_EXECUTION : Real;   // Motor 6 Leak Rate (L/min) Execution Value
      MOTOR_6_TEMPERATURE_EXECUTION : Real;   // Motor 6 Temperature (Â°C) Execution Value
      MOTOR_6_STATUS_EXECUTION : USInt;   // Motor 6 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_6_VALVE_EXECUTION : USInt;   // Motor 6 Valve Control (0=Closed, 1=Open)
      MOTOR_6_LINE_FILTER_EXECUTION : USInt;   // Motor 6 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_6_SUCTION_FILTER_EXECUTION : USInt;   // Motor 6 Suction Filter Status (0=Error, 1=OK)
      MOTOR_6_ENABLE_EXECUTION : Bool;   // Motor 6 Enable Control (FALSE=Disabled, TRUE=Enabled) ============================================================================= MOTOR-PUMP #7 VARIABLES (SPECIAL SYSTEM - Different Control Logic) =============================================================================
      MOTOR_7_RPM_EXECUTION : Real;   // Motor 7 RPM (FIXED - Read Only, always 1500 RPM)
      MOTOR_7_CURRENT_EXECUTION : Real;   // Motor 7 Current (A) Execution Value
      MOTOR_7_TARGET_EXECUTION : Real;   // Motor 7 Target RPM (FIXED - Read Only, always 1500 RPM)
      MOTOR_7_FLOW_EXECUTION : Real;   // Motor 7 Flow Rate (FIXED - Read Only, always 34 L/min)
      MOTOR_7_PRESSURE_EXECUTION : Real;   // Motor 7 Pressure (bar) - ADJUSTABLE SETPOINT
      MOTOR_7_LEAK_EXECUTION : Real;   // Motor 7 Leak Rate (L/min) Execution Value
      MOTOR_7_TEMPERATURE_EXECUTION : Real;   // Motor 7 Temperature (Â°C) Execution Value
      MOTOR_7_STATUS_EXECUTION : USInt;   // Motor 7 Status (0=Offline, 1=Ready, 2=Running, 3=Error)
      MOTOR_7_VALVE_EXECUTION : USInt;   // Motor 7 Valve Control (0=Closed, 1=Open)
      MOTOR_7_LINE_FILTER_EXECUTION : USInt;   // Motor 7 Line Filter Status (0=Error, 1=Warning, 2=OK)
      MOTOR_7_SUCTION_FILTER_EXECUTION : USInt;   // Motor 7 Suction Filter Status (0=Error, 1=OK)
      MOTOR_7_PRESSURE_SETPOINT : Real;   // Motor 7 Pressure Setpoint (bar) - User Adjustable
      MOTOR_7_ENABLE_EXECUTION : Bool;   // Motor 7 Enable Control (FALSE=Disabled, TRUE=Enabled) ============================================================================= SYSTEM LEVEL EXECUTION VARIABLES ============================================================================= System Control Panel Variables
      SYSTEM_TOTAL_FLOW_EXECUTION : Real;   // Total System Flow Rate (L/min) - Sum of Motor 1-6 flows
      SYSTEM_PRESSURE_EXECUTION : Real;   // System Pressure (bar) - Main system pressure
      SYSTEM_TANK_LEVEL_EXECUTION : Real;   // Tank Oil Level (%)
      SYSTEM_TANK_TEMPERATURE_EXECUTION : Real;   // Tank Oil Temperature (Â°C)
      SYSTEM_STATUS_EXECUTION : USInt;   // Overall System Status (0=Offline, 1=Ready, 2=Running, 3=Error, 4=Maintenance) Temperature & Cooling System Variables
      COOLING_AQUA_SENSOR_EXECUTION : Real;   // Aqua/Water Sensor Level (%)
      COOLING_OIL_LEVEL_LITERS_EXECUTION : Real;   // Oil Level in Tank (Liters)
      COOLING_OIL_LEVEL_PERCENT_EXECUTION : Real;   // Oil Level in Tank (%)
      COOLING_OIL_TEMPERATURE_EXECUTION : Real;   // Oil Temperature (Â°C)
      COOLING_WATER_TEMPERATURE_EXECUTION : Real;   // Water/Coolant Temperature (Â°C)
      COOLING_SYSTEM_STATUS_EXECUTION : USInt;   // Cooling System Status (0=Offline, 1=Normal, 2=Warning, 3=Critical) System Control Variables
      SYSTEM_CONTROL_MODE_EXECUTION : USInt;   // Control Mode (0=Local, 1=Remote)
      SYSTEM_EMERGENCY_STOP_EXECUTION : Bool;   // Emergency Stop Status (FALSE=Normal, TRUE=Emergency Stop)
      SYSTEM_PUMP_ENABLE_EXECUTION : Bool;   // System Pump Enable (FALSE=Disabled, TRUE=Enabled) Calculated Values (Read-Only)
      TOTAL_ACTIVE_MOTORS : USInt;   // Count of currently running motors
      TOTAL_POWER_CONSUMPTION : Real;   // Total power consumption (kW)
      AVERAGE_SYSTEM_TEMPERATURE : Real;   // Average temperature across all motors
      SYSTEM_EFFICIENCY : Real;   // System efficiency percentage ============================================================================= ALARM AND WARNING VARIABLES ============================================================================= System Alarms
      ALARM_HIGH_PRESSURE : Bool;   // High Pressure Alarm (FALSE=Normal, TRUE=Alarm)
      ALARM_LOW_PRESSURE : Bool;   // Low Pressure Alarm (FALSE=Normal, TRUE=Alarm)
      ALARM_HIGH_TEMPERATURE : Bool;   // High Temperature Alarm (FALSE=Normal, TRUE=Alarm)
      ALARM_LOW_TANK_LEVEL : Bool;   // Low Tank Level Alarm (FALSE=Normal, TRUE=Alarm)
      ALARM_FILTER_BLOCKED : Bool;   // Filter Blocked Alarm (FALSE=Normal, TRUE=Alarm)
      ALARM_MOTOR_OVERLOAD : Bool;   // Motor Overload Alarm (FALSE=Normal, TRUE=Alarm) Motor Specific Alarm Bitmasks
      MOTOR_ALARM_OVERLOAD_MASK : Byte;   // Motor Overload Alarm Bitmask (bit 0=Motor1, bit 1=Motor2, etc.)
      MOTOR_ALARM_OVERHEAT_MASK : Byte;   // Motor Overheat Alarm Bitmask
      MOTOR_ALARM_LEAK_MASK : Byte;   // Motor Leak Alarm Bitmask
   END_VAR


BEGIN
   MOTOR_1_RPM_EXECUTION := 0.0;
   MOTOR_1_CURRENT_EXECUTION := 0.0;
   MOTOR_1_TARGET_EXECUTION := 0.0;
   MOTOR_1_FLOW_EXECUTION := 0.0;
   MOTOR_1_PRESSURE_EXECUTION := 0.0;
   MOTOR_1_LEAK_EXECUTION := 0.0;
   MOTOR_1_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_1_STATUS_EXECUTION := 0;
   MOTOR_1_VALVE_EXECUTION := 0;
   MOTOR_1_LINE_FILTER_EXECUTION := 0;
   MOTOR_1_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_1_ENABLE_EXECUTION := FALSE;
   MOTOR_2_RPM_EXECUTION := 0.0;
   MOTOR_2_CURRENT_EXECUTION := 0.0;
   MOTOR_2_TARGET_EXECUTION := 0.0;
   MOTOR_2_FLOW_EXECUTION := 0.0;
   MOTOR_2_PRESSURE_EXECUTION := 0.0;
   MOTOR_2_LEAK_EXECUTION := 0.0;
   MOTOR_2_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_2_STATUS_EXECUTION := 0;
   MOTOR_2_VALVE_EXECUTION := 0;
   MOTOR_2_LINE_FILTER_EXECUTION := 0;
   MOTOR_2_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_2_ENABLE_EXECUTION := FALSE;
   MOTOR_3_RPM_EXECUTION := 0.0;
   MOTOR_3_CURRENT_EXECUTION := 0.0;
   MOTOR_3_TARGET_EXECUTION := 0.0;
   MOTOR_3_FLOW_EXECUTION := 0.0;
   MOTOR_3_PRESSURE_EXECUTION := 0.0;
   MOTOR_3_LEAK_EXECUTION := 0.0;
   MOTOR_3_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_3_STATUS_EXECUTION := 0;
   MOTOR_3_VALVE_EXECUTION := 0;
   MOTOR_3_LINE_FILTER_EXECUTION := 0;
   MOTOR_3_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_3_ENABLE_EXECUTION := FALSE;
   MOTOR_4_RPM_EXECUTION := 0.0;
   MOTOR_4_CURRENT_EXECUTION := 0.0;
   MOTOR_4_TARGET_EXECUTION := 0.0;
   MOTOR_4_FLOW_EXECUTION := 0.0;
   MOTOR_4_PRESSURE_EXECUTION := 0.0;
   MOTOR_4_LEAK_EXECUTION := 0.0;
   MOTOR_4_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_4_STATUS_EXECUTION := 0;
   MOTOR_4_VALVE_EXECUTION := 0;
   MOTOR_4_LINE_FILTER_EXECUTION := 0;
   MOTOR_4_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_4_ENABLE_EXECUTION := FALSE;
   MOTOR_5_RPM_EXECUTION := 0.0;
   MOTOR_5_CURRENT_EXECUTION := 0.0;
   MOTOR_5_TARGET_EXECUTION := 0.0;
   MOTOR_5_FLOW_EXECUTION := 0.0;
   MOTOR_5_PRESSURE_EXECUTION := 0.0;
   MOTOR_5_LEAK_EXECUTION := 0.0;
   MOTOR_5_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_5_STATUS_EXECUTION := 0;
   MOTOR_5_VALVE_EXECUTION := 0;
   MOTOR_5_LINE_FILTER_EXECUTION := 0;
   MOTOR_5_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_5_ENABLE_EXECUTION := FALSE;
   MOTOR_6_RPM_EXECUTION := 0.0;
   MOTOR_6_CURRENT_EXECUTION := 0.0;
   MOTOR_6_TARGET_EXECUTION := 0.0;
   MOTOR_6_FLOW_EXECUTION := 0.0;
   MOTOR_6_PRESSURE_EXECUTION := 0.0;
   MOTOR_6_LEAK_EXECUTION := 0.0;
   MOTOR_6_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_6_STATUS_EXECUTION := 0;
   MOTOR_6_VALVE_EXECUTION := 0;
   MOTOR_6_LINE_FILTER_EXECUTION := 0;
   MOTOR_6_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_6_ENABLE_EXECUTION := FALSE;
   MOTOR_7_RPM_EXECUTION := 1500.0;
   MOTOR_7_CURRENT_EXECUTION := 0.0;
   MOTOR_7_TARGET_EXECUTION := 1500.0;
   MOTOR_7_FLOW_EXECUTION := 34.0;
   MOTOR_7_PRESSURE_EXECUTION := 0.0;
   MOTOR_7_LEAK_EXECUTION := 0.0;
   MOTOR_7_TEMPERATURE_EXECUTION := 0.0;
   MOTOR_7_STATUS_EXECUTION := 0;
   MOTOR_7_VALVE_EXECUTION := 0;
   MOTOR_7_LINE_FILTER_EXECUTION := 0;
   MOTOR_7_SUCTION_FILTER_EXECUTION := 0;
   MOTOR_7_PRESSURE_SETPOINT := 250.0;
   MOTOR_7_ENABLE_EXECUTION := FALSE;
   SYSTEM_TOTAL_FLOW_EXECUTION := 0.0;
   SYSTEM_PRESSURE_EXECUTION := 0.0;
   SYSTEM_TANK_LEVEL_EXECUTION := 0.0;
   SYSTEM_TANK_TEMPERATURE_EXECUTION := 0.0;
   SYSTEM_STATUS_EXECUTION := 0;
   COOLING_AQUA_SENSOR_EXECUTION := 0.0;
   COOLING_OIL_LEVEL_LITERS_EXECUTION := 0.0;
   COOLING_OIL_LEVEL_PERCENT_EXECUTION := 0.0;
   COOLING_OIL_TEMPERATURE_EXECUTION := 0.0;
   COOLING_WATER_TEMPERATURE_EXECUTION := 0.0;
   COOLING_SYSTEM_STATUS_EXECUTION := 0;
   SYSTEM_CONTROL_MODE_EXECUTION := 0;
   SYSTEM_EMERGENCY_STOP_EXECUTION := FALSE;
   SYSTEM_PUMP_ENABLE_EXECUTION := FALSE;
   TOTAL_ACTIVE_MOTORS := 0;
   TOTAL_POWER_CONSUMPTION := 0.0;
   AVERAGE_SYSTEM_TEMPERATURE := 0.0;
   SYSTEM_EFFICIENCY := 0.0;
   ALARM_HIGH_PRESSURE := FALSE;
   ALARM_LOW_PRESSURE := FALSE;
   ALARM_HIGH_TEMPERATURE := FALSE;
   ALARM_LOW_TANK_LEVEL := FALSE;
   ALARM_FILTER_BLOCKED := FALSE;
   ALARM_MOTOR_OVERLOAD := FALSE;
   MOTOR_ALARM_OVERLOAD_MASK := 16#00;
   MOTOR_ALARM_OVERHEAT_MASK := 16#00;
   MOTOR_ALARM_LEAK_MASK := 16#00;

END_DATA_BLOCK

DATA_BLOCK "DB_HGU_Motors"
TITLE = 'HGU Motor Control Data Block'
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
// =============================================================================
// TUSAÅž HGU Control System - Motor Control Data Block
// TIA Portal S7-1500 Structured Control Language (SCL)
// Generated: 2025-01-14
// Description: Data block for 6x G120C PN motor drives with Telegram 1 interface
// =============================================================================
   VAR 
      MOTOR_1 : "UDT_G120C_Telegram1";   // Motor 1 - G120C PN Drive Interface
      MOTOR_2 : "UDT_G120C_Telegram1";   // Motor 2 - G120C PN Drive Interface
      MOTOR_3 : "UDT_G120C_Telegram1";   // Motor 3 - G120C PN Drive Interface
      MOTOR_4 : "UDT_G120C_Telegram1";   // Motor 4 - G120C PN Drive Interface
      MOTOR_5 : "UDT_G120C_Telegram1";   // Motor 5 - G120C PN Drive Interface
      MOTOR_6 : "UDT_G120C_Telegram1";   // Motor 6 - G120C PN Drive Interface ============================================================================= MOTOR OPERATIONAL DATA (Additional sensors and calculated values) ============================================================================= Motor 1 Operational Data
      MOTOR_1_CURRENT_ANALOG : Real;   // Motor 1 Current from analog input (A)
      MOTOR_1_POWER_CALC : Real;   // Motor 1 Calculated power (kW)
      MOTOR_1_EFFICIENCY : Real;   // Motor 1 Efficiency (%)
      MOTOR_1_RUNTIME_HOURS : Real;   // Motor 1 Runtime hours
      MOTOR_1_START_COUNT : DInt;   // Motor 1 Start counter Motor 2 Operational Data
      MOTOR_2_CURRENT_ANALOG : Real;   // Motor 2 Current from analog input (A)
      MOTOR_2_POWER_CALC : Real;   // Motor 2 Calculated power (kW)
      MOTOR_2_EFFICIENCY : Real;   // Motor 2 Efficiency (%)
      MOTOR_2_RUNTIME_HOURS : Real;   // Motor 2 Runtime hours
      MOTOR_2_START_COUNT : DInt;   // Motor 2 Start counter Motor 3 Operational Data
      MOTOR_3_CURRENT_ANALOG : Real;   // Motor 3 Current from analog input (A)
      MOTOR_3_POWER_CALC : Real;   // Motor 3 Calculated power (kW)
      MOTOR_3_EFFICIENCY : Real;   // Motor 3 Efficiency (%)
      MOTOR_3_RUNTIME_HOURS : Real;   // Motor 3 Runtime hours
      MOTOR_3_START_COUNT : DInt;   // Motor 3 Start counter Motor 4 Operational Data
      MOTOR_4_CURRENT_ANALOG : Real;   // Motor 4 Current from analog input (A)
      MOTOR_4_POWER_CALC : Real;   // Motor 4 Calculated power (kW)
      MOTOR_4_EFFICIENCY : Real;   // Motor 4 Efficiency (%)
      MOTOR_4_RUNTIME_HOURS : Real;   // Motor 4 Runtime hours
      MOTOR_4_START_COUNT : DInt;   // Motor 4 Start counter Motor 5 Operational Data
      MOTOR_5_CURRENT_ANALOG : Real;   // Motor 5 Current from analog input (A)
      MOTOR_5_POWER_CALC : Real;   // Motor 5 Calculated power (kW)
      MOTOR_5_EFFICIENCY : Real;   // Motor 5 Efficiency (%)
      MOTOR_5_RUNTIME_HOURS : Real;   // Motor 5 Runtime hours
      MOTOR_5_START_COUNT : DInt;   // Motor 5 Start counter Motor 6 Operational Data
      MOTOR_6_CURRENT_ANALOG : Real;   // Motor 6 Current from analog input (A)
      MOTOR_6_POWER_CALC : Real;   // Motor 6 Calculated power (kW)
      MOTOR_6_EFFICIENCY : Real;   // Motor 6 Efficiency (%)
      MOTOR_6_RUNTIME_HOURS : Real;   // Motor 6 Runtime hours
      MOTOR_6_START_COUNT : DInt;   // Motor 6 Start counter ============================================================================= SYSTEM LEVEL MOTOR MONITORING =============================================================================
      TOTAL_POWER_CONSUMPTION : Real;   // Total power consumption of all motors (kW)
      AVERAGE_EFFICIENCY : Real;   // Average efficiency of all running motors (%)
      SYSTEM_LOAD_FACTOR : Real;   // System load factor (%) ============================================================================= FAULT AND ALARM MANAGEMENT =============================================================================
      MOTOR_FAULT_MASK : Byte;   // Motor fault mask (bit 0=Motor1, bit 1=Motor2, etc.)
      MOTOR_ALARM_MASK : Byte;   // Motor alarm mask (bit 0=Motor1, bit 1=Motor2, etc.)
      MOTOR_RUNNING_MASK : Byte;   // Motor running mask (bit 0=Motor1, bit 1=Motor2, etc.)
      MOTOR_READY_MASK : Byte;   // Motor ready mask (bit 0=Motor1, bit 1=Motor2, etc.) ============================================================================= COMMUNICATION STATUS =============================================================================
      PROFINET_MOTOR_1_OK : Bool;   // Motor 1 PROFINET communication OK
      PROFINET_MOTOR_2_OK : Bool;   // Motor 2 PROFINET communication OK
      PROFINET_MOTOR_3_OK : Bool;   // Motor 3 PROFINET communication OK
      PROFINET_MOTOR_4_OK : Bool;   // Motor 4 PROFINET communication OK
      PROFINET_MOTOR_5_OK : Bool;   // Motor 5 PROFINET communication OK
      PROFINET_MOTOR_6_OK : Bool;   // Motor 6 PROFINET communication OK ============================================================================= MAINTENANCE AND DIAGNOSTICS =============================================================================
      MAINTENANCE_TIMER : Time;   // Maintenance timer
      LAST_MAINTENANCE_DATE : Date;   // Last maintenance date
      NEXT_MAINTENANCE_DUE : Date;   // Next maintenance due date Individual motor maintenance counters
      MOTOR_1_MAINTENANCE_HOURS : Real;   // Motor 1 maintenance hours counter
      MOTOR_2_MAINTENANCE_HOURS : Real;   // Motor 2 maintenance hours counter
      MOTOR_3_MAINTENANCE_HOURS : Real;   // Motor 3 maintenance hours counter
      MOTOR_4_MAINTENANCE_HOURS : Real;   // Motor 4 maintenance hours counter
      MOTOR_5_MAINTENANCE_HOURS : Real;   // Motor 5 maintenance hours counter
      MOTOR_6_MAINTENANCE_HOURS : Real;   // Motor 6 maintenance hours counter
   END_VAR


BEGIN
   MOTOR_1_CURRENT_ANALOG := 0.0;
   MOTOR_1_POWER_CALC := 0.0;
   MOTOR_1_EFFICIENCY := 0.0;
   MOTOR_1_RUNTIME_HOURS := 0.0;
   MOTOR_1_START_COUNT := 0;
   MOTOR_2_CURRENT_ANALOG := 0.0;
   MOTOR_2_POWER_CALC := 0.0;
   MOTOR_2_EFFICIENCY := 0.0;
   MOTOR_2_RUNTIME_HOURS := 0.0;
   MOTOR_2_START_COUNT := 0;
   MOTOR_3_CURRENT_ANALOG := 0.0;
   MOTOR_3_POWER_CALC := 0.0;
   MOTOR_3_EFFICIENCY := 0.0;
   MOTOR_3_RUNTIME_HOURS := 0.0;
   MOTOR_3_START_COUNT := 0;
   MOTOR_4_CURRENT_ANALOG := 0.0;
   MOTOR_4_POWER_CALC := 0.0;
   MOTOR_4_EFFICIENCY := 0.0;
   MOTOR_4_RUNTIME_HOURS := 0.0;
   MOTOR_4_START_COUNT := 0;
   MOTOR_5_CURRENT_ANALOG := 0.0;
   MOTOR_5_POWER_CALC := 0.0;
   MOTOR_5_EFFICIENCY := 0.0;
   MOTOR_5_RUNTIME_HOURS := 0.0;
   MOTOR_5_START_COUNT := 0;
   MOTOR_6_CURRENT_ANALOG := 0.0;
   MOTOR_6_POWER_CALC := 0.0;
   MOTOR_6_EFFICIENCY := 0.0;
   MOTOR_6_RUNTIME_HOURS := 0.0;
   MOTOR_6_START_COUNT := 0;
   TOTAL_POWER_CONSUMPTION := 0.0;
   AVERAGE_EFFICIENCY := 0.0;
   SYSTEM_LOAD_FACTOR := 0.0;
   MOTOR_FAULT_MASK := 16#00;
   MOTOR_ALARM_MASK := 16#00;
   MOTOR_RUNNING_MASK := 16#00;
   MOTOR_READY_MASK := 16#00;
   PROFINET_MOTOR_1_OK := FALSE;
   PROFINET_MOTOR_2_OK := FALSE;
   PROFINET_MOTOR_3_OK := FALSE;
   PROFINET_MOTOR_4_OK := FALSE;
   PROFINET_MOTOR_5_OK := FALSE;
   PROFINET_MOTOR_6_OK := FALSE;
   MAINTENANCE_TIMER := T#0MS;
   LAST_MAINTENANCE_DATE := D#2025-01-01;
   NEXT_MAINTENANCE_DUE := D#2025-07-01;
   MOTOR_1_MAINTENANCE_HOURS := 0.0;
   MOTOR_2_MAINTENANCE_HOURS := 0.0;
   MOTOR_3_MAINTENANCE_HOURS := 0.0;
   MOTOR_4_MAINTENANCE_HOURS := 0.0;
   MOTOR_5_MAINTENANCE_HOURS := 0.0;
   MOTOR_6_MAINTENANCE_HOURS := 0.0;

END_DATA_BLOCK

FUNCTION_BLOCK "FB_HGU_Motor_Control_Simple"
TITLE = 'HGU Motor Control Simple - G120C PN Drives'
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
// =============================================================================
// TUSAÅž HGU Control System - Simple Motor Control Function Block
// TIA Portal S7-1500 Structured Control Language (SCL)
// Generated: 2025-01-14
// Description: Simplified motor control block for 6x G120C PN drives
// =============================================================================
   VAR_INPUT 
      Enable : Bool;   // Enable motor control function
      Reset : Bool;   // Reset all motor faults
      EmergencyStop : Bool;   // Emergency stop signal
      SystemEnable : Bool;   // System enable signal
   END_VAR

   VAR_OUTPUT 
      Ready : Bool;   // Motor control ready
      Error : Bool;   // Motor control error
      ActiveMotors : Int;   // Number of active motors
      TotalFlow : Real;   // Total system flow
   END_VAR

   VAR 
      MotorLeds1 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
      MotorLeds2 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
      MotorLeds3 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
      MotorLeds4 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
      MotorLeds5 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
      MotorLeds6 { S7_SetPoint := 'False'} : "FB_HGU_LED_Control";
   END_VAR

   VAR_TEMP 
      i : Int;   // Loop counter
      temp_rpm : Int;   // Temporary RPM value
      motor_count : Int;   // Motor counter
      total_flow_temp : Real;   // Temporary total flow
   END_VAR


BEGIN
	
	// Reset outputs
	#Ready := FALSE;
	#Error := FALSE;
	#ActiveMotors := 0;
	#TotalFlow := 0.0;
	
	// Check enable condition
	IF NOT #Enable THEN
	    RETURN;
	END_IF;
	
	// Update system emergency stop
	"DB_HGU_Execution".SYSTEM_EMERGENCY_STOP_EXECUTION := #EmergencyStop;
	"DB_HGU_Execution".SYSTEM_PUMP_ENABLE_EXECUTION := #SystemEnable;
	
	// Initialize counters
	#motor_count := 0;
	#total_flow_temp := 0.0;
	
	// =============================================================================
	// MOTOR 1 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_1.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_1_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_1.STW1.%X0 := TRUE;          // ON/OFF1
	END_IF;
	"DB_HGU_Motors".MOTOR_1.STW1.%X1 := TRUE;              // OFF2
	"DB_HGU_Motors".MOTOR_1.STW1.%X2 := TRUE;              // OFF3
	"DB_HGU_Motors".MOTOR_1.STW1.%X3 := "DB_HGU_Execution".MOTOR_1_ENABLE_EXECUTION;  // Enable operation
	"DB_HGU_Motors".MOTOR_1.STW1.%X4 := TRUE;              // Ramp enable
	"DB_HGU_Motors".MOTOR_1.STW1.%X5 := TRUE;              // Ramp continue
	"DB_HGU_Motors".MOTOR_1.STW1.%X6 := TRUE;              // Setpoint enable
	"DB_HGU_Motors".MOTOR_1.STW1.%X7 := #Reset;             // Fault acknowledge
	"DB_HGU_Motors".MOTOR_1.STW1.%X10 := TRUE;             // Control by PLC
	"DB_HGU_Motors".MOTOR_1.STW1.%X11 := FALSE;            // Forward direction
	
	// Setpoint scaling
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_1_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_1.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	
	// Actual value processing
	"DB_HGU_Execution".MOTOR_1_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_1.NIST_A) * 3000.0 / 16384.0;
	
	// Status processing
	IF "DB_HGU_Motors".MOTOR_1.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_1_STATUS_EXECUTION := 3;  // Error
	ELSIF "DB_HGU_Motors".MOTOR_1.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_1_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_1_STATUS_EXECUTION := 2;  // Running
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_1_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_1.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_1_STATUS_EXECUTION := 1;  // Ready
	ELSE
	    "DB_HGU_Execution".MOTOR_1_STATUS_EXECUTION := 0;  // Offline
	END_IF;
	
	// =============================================================================
	// MOTOR 2 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_2.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_2_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_2.STW1.%X0 := TRUE;
	END_IF;
	"DB_HGU_Motors".MOTOR_2.STW1.%X1 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X2 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X3 := "DB_HGU_Execution".MOTOR_2_ENABLE_EXECUTION;
	"DB_HGU_Motors".MOTOR_2.STW1.%X4 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X5 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X6 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X7 := #Reset;
	"DB_HGU_Motors".MOTOR_2.STW1.%X10 := TRUE;
	"DB_HGU_Motors".MOTOR_2.STW1.%X11 := FALSE;
	
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_2_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_2.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	"DB_HGU_Execution".MOTOR_2_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_2.NIST_A) * 3000.0 / 16384.0;
	
	IF "DB_HGU_Motors".MOTOR_2.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_2_STATUS_EXECUTION := 3;
	ELSIF "DB_HGU_Motors".MOTOR_2.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_2_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_2_STATUS_EXECUTION := 2;
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_2_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_2.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_2_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".MOTOR_2_STATUS_EXECUTION := 0;
	END_IF;
	
	// =============================================================================
	// MOTOR 3 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_3.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_3_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_3.STW1.%X0 := TRUE;
	END_IF;
	"DB_HGU_Motors".MOTOR_3.STW1.%X1 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X2 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X3 := "DB_HGU_Execution".MOTOR_3_ENABLE_EXECUTION;
	"DB_HGU_Motors".MOTOR_3.STW1.%X4 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X5 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X6 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X7 := #Reset;
	"DB_HGU_Motors".MOTOR_3.STW1.%X10 := TRUE;
	"DB_HGU_Motors".MOTOR_3.STW1.%X11 := FALSE;
	
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_3_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_3.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	"DB_HGU_Execution".MOTOR_3_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_3.NIST_A) * 3000.0 / 16384.0;
	
	IF "DB_HGU_Motors".MOTOR_3.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_3_STATUS_EXECUTION := 3;
	ELSIF "DB_HGU_Motors".MOTOR_3.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_3_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_3_STATUS_EXECUTION := 2;
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_3_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_3.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_3_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".MOTOR_3_STATUS_EXECUTION := 0;
	END_IF;
	
	// =============================================================================
	// MOTOR 4 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_4.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_4_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_4.STW1.%X0 := TRUE;
	END_IF;
	"DB_HGU_Motors".MOTOR_4.STW1.%X1 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X2 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X3 := "DB_HGU_Execution".MOTOR_4_ENABLE_EXECUTION;
	"DB_HGU_Motors".MOTOR_4.STW1.%X4 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X5 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X6 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X7 := #Reset;
	"DB_HGU_Motors".MOTOR_4.STW1.%X10 := TRUE;
	"DB_HGU_Motors".MOTOR_4.STW1.%X11 := FALSE;
	
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_4_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_4.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	"DB_HGU_Execution".MOTOR_4_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_4.NIST_A) * 3000.0 / 16384.0;
	
	IF "DB_HGU_Motors".MOTOR_4.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_4_STATUS_EXECUTION := 3;
	ELSIF "DB_HGU_Motors".MOTOR_4.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_4_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_4_STATUS_EXECUTION := 2;
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_4_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_4.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_4_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".MOTOR_4_STATUS_EXECUTION := 0;
	END_IF;
	
	// =============================================================================
	// MOTOR 5 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_5.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_5_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_5.STW1.%X0 := TRUE;
	END_IF;
	"DB_HGU_Motors".MOTOR_5.STW1.%X1 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X2 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X3 := "DB_HGU_Execution".MOTOR_5_ENABLE_EXECUTION;
	"DB_HGU_Motors".MOTOR_5.STW1.%X4 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X5 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X6 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X7 := #Reset;
	"DB_HGU_Motors".MOTOR_5.STW1.%X10 := TRUE;
	"DB_HGU_Motors".MOTOR_5.STW1.%X11 := FALSE;
	
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_5_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_5.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	"DB_HGU_Execution".MOTOR_5_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_5.NIST_A) * 3000.0 / 16384.0;
	
	IF "DB_HGU_Motors".MOTOR_5.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_5_STATUS_EXECUTION := 3;
	ELSIF "DB_HGU_Motors".MOTOR_5.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_5_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_5_STATUS_EXECUTION := 2;
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_5_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_5.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_5_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".MOTOR_5_STATUS_EXECUTION := 0;
	END_IF;
	
	// =============================================================================
	// MOTOR 6 CONTROL
	// =============================================================================
	"DB_HGU_Motors".MOTOR_6.STW1 := 0;
	IF "DB_HGU_Execution".MOTOR_6_ENABLE_EXECUTION AND NOT #EmergencyStop THEN
	    "DB_HGU_Motors".MOTOR_6.STW1.%X0 := TRUE;
	END_IF;
	"DB_HGU_Motors".MOTOR_6.STW1.%X1 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X2 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X3 := "DB_HGU_Execution".MOTOR_6_ENABLE_EXECUTION;
	"DB_HGU_Motors".MOTOR_6.STW1.%X4 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X5 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X6 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X7 := #Reset;
	"DB_HGU_Motors".MOTOR_6.STW1.%X10 := TRUE;
	"DB_HGU_Motors".MOTOR_6.STW1.%X11 := FALSE;
	
	#temp_rpm := REAL_TO_INT("DB_HGU_Execution".MOTOR_6_TARGET_EXECUTION * 16384.0 / 3000.0);
	"DB_HGU_Motors".MOTOR_6.NSOLL_A := LIMIT(MN := -16384, IN := #temp_rpm, MX := 16383);
	"DB_HGU_Execution".MOTOR_6_RPM_EXECUTION := INT_TO_REAL("DB_HGU_Motors".MOTOR_6.NIST_A) * 3000.0 / 16384.0;
	
	IF "DB_HGU_Motors".MOTOR_6.ZSW1.%X3 THEN
	    "DB_HGU_Execution".MOTOR_6_STATUS_EXECUTION := 3;
	ELSIF "DB_HGU_Motors".MOTOR_6.ZSW1.%X2 AND ABS("DB_HGU_Execution".MOTOR_6_RPM_EXECUTION) > 50.0 THEN
	    "DB_HGU_Execution".MOTOR_6_STATUS_EXECUTION := 2;
	    #motor_count := #motor_count + 1;
	    #total_flow_temp := #total_flow_temp + "DB_HGU_Execution".MOTOR_6_FLOW_EXECUTION;
	ELSIF "DB_HGU_Motors".MOTOR_6.ZSW1.%X1 THEN
	    "DB_HGU_Execution".MOTOR_6_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".MOTOR_6_STATUS_EXECUTION := 0;
	END_IF;
	
	// =============================================================================
	// SYSTEM CALCULATIONS
	// =============================================================================
	"DB_HGU_Execution".SYSTEM_TOTAL_FLOW_EXECUTION := #total_flow_temp;
	"DB_HGU_Execution".TOTAL_ACTIVE_MOTORS := #motor_count;
	
	// System status
	IF #EmergencyStop THEN
	    "DB_HGU_Execution".SYSTEM_STATUS_EXECUTION := 3;
	ELSIF #motor_count > 0 THEN
	    "DB_HGU_Execution".SYSTEM_STATUS_EXECUTION := 2;
	ELSIF #SystemEnable THEN
	    "DB_HGU_Execution".SYSTEM_STATUS_EXECUTION := 1;
	ELSE
	    "DB_HGU_Execution".SYSTEM_STATUS_EXECUTION := 0;
	END_IF;
	
	// Update outputs
	#ActiveMotors := #motor_count;
	#TotalFlow := #total_flow_temp;
	#Ready := #Enable AND NOT #EmergencyStop;
	#Error := #EmergencyStop;
	
	
	    #MotorLeds1(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	      
	    #MotorLeds2(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	    #MotorLeds3(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	    #MotorLeds4(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	    #MotorLeds5(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	
	    #MotorLeds6(motor_status := 0,
	                  line_filter_status := 0,
	                  suction_filter_status := 0,
	                  valve_status := False,
	                  blink_clock := False);
	
	             
END_FUNCTION_BLOCK

DATA_BLOCK "FB_HGU_Motor_Control_Simple_DB"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 1.0
NON_RETAIN
"FB_HGU_Motor_Control_Simple"

BEGIN

END_DATA_BLOCK

ORGANIZATION_BLOCK "Main"
TITLE = "Main Program Sweep (Cycle)"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1

BEGIN
	"FB_HGU_Motor_Control_Simple_DB"();
	
	
END_ORGANIZATION_BLOCK

