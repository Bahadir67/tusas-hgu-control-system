FUNCTION_BLOCK "FB_Safety_Status_Manager"
{ S7_Optimized_Access := 'TRUE' }
VERSION : '1.0'
// =============================================================================
// TUSAŞ HGU Status Manager V17
// Purpose: Operational status bit processing only
// 
// NOTE: Safety and Motor Error processing moved to FB_Error_Manager.scl
// 
// Status Word (16 bits):
//   Bit 0:  CoilTubeSoftStarterRunning    - Coiltube Yumuşak Yol Verici Çalışıyor
//   Bit 1:  CoilTubeSoftStarterContactor  - Coiltube YYV Kontaktör Devrede
//   Bit 2:  CircSoftStarterRunning        - Sirkülasyon YYV Çalışıyor
//   Bit 3:  CircSoftStarterContactor      - Sirkülasyon YYV Kontaktör Devrede
//   Bit 4:  ParticleContactorEngaged      - Particle Measurement Kontaktör Devrede
//   Bit 5:  PhaseProtectionOk             - Faz Koruma Rölesi OK
//   Bit 6:  SafetyRelayOk                 - Emniyet Rölesi OK
//   Bit 7-15: Reserved
// =============================================================================

VAR_INPUT
    Enable : Bool := FALSE;                    // Enable safety status processing
END_VAR

VAR_OUTPUT
    // Processing status
    Processing_Active : Bool := FALSE;         // Processing active status
    
    // Status summary
    Active_Status_Count : USInt := 0;         // Number of active status signals (0-7)
END_VAR

VAR
    // Internal processing
    Status_Word_Temp : Word := 0;             // Temporary status word construction
    
    // Processing control
    Processing_Timer : TON;                    // Main processing cycle timer
    Init_Complete : Bool := FALSE;             // Initialization complete flag
    
    i : USInt;                                // Loop counter
END_VAR

VAR_TEMP
    Temp_Bit : Bool;                          // Temporary bit processing
    Temp_Word : Word;                         // Temporary word processing
END_VAR

BEGIN

// =============================================================================
// INITIALIZATION
// =============================================================================
IF NOT Init_Complete THEN
    Processing_Active := FALSE;
    Active_Status_Count := USINT#0;
    
    Processing_Timer(IN := FALSE, PT := T#100ms);
    
    Init_Complete := TRUE;
END_IF;

// =============================================================================
// MAIN PROCESSING LOGIC
// =============================================================================
IF Enable THEN
    Processing_Active := TRUE;
    
    // Process every 100ms
    Processing_Timer(IN := TRUE, PT := T#100ms);
    
    IF Processing_Timer.Q THEN
        Active_Status_Count := USINT#0;
        
        // =============================================================================
        // BUILD STATUS WORD (16 bits) - Operational Status Only
        // =============================================================================
        Status_Word_Temp := WORD#0;
        
        // Operational status signals (Bits 0-6)
        IF "CoilTubeSoftStarterRunning" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000000001;  // Bit 0
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "CoilTubeSoftStarterContactor" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000000010;  // Bit 1
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "CircSoftStarterRunning" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000000100;  // Bit 2
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "CircSoftStarterContactor" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000001000;  // Bit 3
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "ParticleContactorEngaged" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000010000;  // Bit 4
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "PhaseProtectionOk" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000000100000;  // Bit 5
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        IF "SafetyRelayOk" THEN 
            Status_Word_Temp := Status_Word_Temp OR WORD#2#0000000001000000;  // Bit 6
            Active_Status_Count := Active_Status_Count + USINT#1;
        END_IF;
        
        // Write to DB
        "DB_HGU_Execution_V17".MCC_STATUS_WORD := Status_Word_Temp;
        
        Processing_Timer(IN := FALSE, PT := T#100ms);
    END_IF;
    
ELSE
    // =============================================================================
    // DISABLED STATE
    // =============================================================================
    Processing_Active := FALSE;
    Active_Status_Count := USINT#0;
    
    Processing_Timer(IN := FALSE, PT := T#100ms);
    
    // Reset MCC Status Word only (other errors handled by Error Manager)
    "DB_HGU_Execution_V17".MCC_STATUS_WORD := WORD#0;
    
END_IF;

END_FUNCTION_BLOCK